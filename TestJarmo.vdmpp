class TestJarmo is subclass of Tests
types

operations
/***** USE CASE SCENARIOS ******/
public testBoard : () ==> () 
			testBoard() == (
						dcl g: Game := new Game();
						
						dcl board: seq of Position := g.getBoard();
						
						for i = 1 to 5 do (
							assertTrue(board(i).getOccupied() = 1);
						);
						
						for i = 21 to 25 do (
							assertTrue(board(i).getOccupied() = 2);
						);
						
						for i = 6 to 20 do (
							assertTrue(board(i).getOccupied() = 0);
						);
						
				);			
public testMove : () ==> ()
			testMove() == (
			
			--movimento para casa vazia
			--comer peca
			--nao mover a sua peca
			--movimento para uma casa ocupada por uma peca do mesmo jogador
			dcl g: Game := new Game();
			dcl board: seq of Position := g.getBoard();
			
			-- mover peca jogador 1 para casa vazia
			IO`print("TESTE MEXER PECA DE JOGADOR 1 PARA UMA CASA VAZIA \n");
			IO`print("peça mexeu:"); assertTrue(g.movePiece(board(1), board(8)));
			IO`print("posicao inicial do tabuleiro mudou:");assertTrue(board(1).getOccupied() = 0);
			IO`print("posiçao final do tabuleiro mudou:");assertTrue(board(8).getOccupied() = 1);	
			IO`print("jogador mudou para 2:");assertTrue(g.getCurrentPlayer().getNumber() = 2);
		 
		 --mover peca jogador 2 para casa vazia
		  IO`print("TESTE MEXER PECA DE JOGADOR 2 PARA UMA CASA VAZIA \n");
		  IO`print("peça mexeu:"); assertTrue(g.movePiece(board(24), board(15)));			
			IO`print("posicao inicial do tabuleiro mudou:");assertTrue(board(24).getOccupied() = 0);
			IO`print("posiçao final do tabuleiro mudou:");assertTrue(board(15).getOccupied() = 2);
			IO`print("jogador mudou para 1:");assertTrue(g.getCurrentPlayer().getNumber() = 2);
			--nao mover a sua peca - primeira casa - board(1) - esta vazia
			
			-- posicao inicial vazia
			IO`print("TENTAR MOVER A PARTIR DE UMA POSICAO VAZIA \n");
			IO`print("peça mexeu:"); assertTrue(g.movePiece(board(1), board(12)));
			IO`print("posicao inicial do tabuleiro mudou:");assertTrue(board(1).getOccupied() = 0);
			IO`print("posicao final do tabuleiro mudou:");assertTrue(board(12).getOccupied() = 0);	
			IO`print("jogador mudou:");assertTrue(g.getCurrentPlayer().getNumber() = 2);-- o jogador nao pode mudar
			  -- posicao inicial com peca do adversario
			IO`print("TENTAR MOVER PECA ADVERSARIO \n");
			IO`print("peça mexeu:");assertTrue(g.movePiece(board(15), board(24)));
			IO`print("posicao inicial do tabuleiro mudou:");assertTrue(board(15).getOccupied() = 2);
		  IO`print("posicao final do tabuleiro mudou:");assertTrue(board(24).getOccupied() = 0);
		  IO`print("jogador mudou:");assertTrue(g.getCurrentPlayer().getNumber() = 2);-- o jogador nao pode mudar
		    -- comer peca
		  
		  IO`print("TENTAR COMER PECA ADVERSARIO \n");
			IO`print("peça mexeu:");assertTrue(g.movePiece(board(4), board(15)));
			IO`print("posicao inicial do tabuleiro mudou:");assertTrue(board(4).getOccupied() = 0);
		  IO`print("posicao final do tabuleiro mudou:");assertTrue(board(15).getOccupied() = 1);
		  IO`print("jogador mudou:");assertTrue(g.getCurrentPlayer().getNumber() = 2);
		  IO`print("incrementou piecesOut do jogador 2:"); assertTrue(g.getCurrentPlayer().getPiecesOut() = 1);
				
);

public static main: () ==> ()
                main() ==
                (   dcl t : TestJarmo := new TestJarmo();
                    t.testBoard();
                    t.testMove();
      
                        
                );
                
end TestJarmo
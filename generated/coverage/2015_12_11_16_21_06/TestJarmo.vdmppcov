class TestJarmo is subclass of Tests
types

operations
/***** USE CASE SCENARIOS ******/
public testBoard : () ==> () 
			testBoard() == (
						dcl g: Game := new Game();
						
						dcl board: seq of Position := g.getBoard();
						
						for i = 1 to 5 do (
							assertTrue(board(i).getOccupied() = 1);
						);
						
						for i = 21 to 25 do (
							assertTrue(board(i).getOccupied() = 2);
						);
						
						for i = 6 to 20 do (
							assertTrue(board(i).getOccupied() = 0);
						);
						
				);			
				
public testMove : () ==> ()
			testMove() == (
			
			--movimento para casa vazia
			--comer peca
			--nao mover a sua peca
			--movimento para uma casa ocupada por uma peca do mesmo jogador
			dcl g: Game := new Game();
			dcl board: seq of Position := g.getBoard();
			
			-- mover peca jogador 1 para casa vazia
			IO`print("TESTE MEXER PECA DE JOGADOR 1 PARA UMA CASA VAZIA \n");
			IO`print("peca mexeu:"); assertTrue(g.movePiece(board(1), board(8)));
			IO`print("posicao inicial do tabuleiro mudou:");assertTrue(board(1).getOccupied() = 0);
			IO`print("posicao final do tabuleiro mudou:");assertTrue(board(8).getOccupied() = 1);	
			IO`print("jogador mudou para 2:");assertTrue(g.getCurrentPlayer().getNumber() = 2);
		 
		 --mover peca jogador 2 para casa vazia
		  IO`print("TESTE MEXER PECA DE JOGADOR 2 PARA UMA CASA VAZIA \n");
		  IO`print("peca mexeu:"); assertTrue(g.movePiece(board(24), board(15)));			
			IO`print("posicao inicial do tabuleiro mudou:");assertTrue(board(24).getOccupied() = 0);
			IO`print("posicao final do tabuleiro mudou:");assertTrue(board(15).getOccupied() = 2);
			IO`print("jogador mudou para 1:");assertTrue(g.getCurrentPlayer().getNumber() = 2);
			
			-- posicao inicial vazia
			IO`print("TENTAR MOVER A PARTIR DE UMA POSICAO VAZIA \n");
			IO`print("peca mexeu:"); assertTrue(g.movePiece(board(1), board(12)));
			IO`print("posicao inicial do tabuleiro mudou:");assertTrue(board(1).getOccupied() = 0);
			IO`print("posicao final do tabuleiro mudou:");assertTrue(board(12).getOccupied() = 0);	
			IO`print("jogador mudou:");assertTrue(g.getCurrentPlayer().getNumber() = 2);-- o jogador nao pode mudar
			  -- posicao inicial com peca do adversario
			IO`print("TENTAR MOVER PECA ADVERSARIO \n");
			IO`print("peca mexeu:");assertTrue(g.movePiece(board(15), board(24)));
			IO`print("posicao inicial do tabuleiro mudou:");assertTrue(board(15).getOccupied() = 2);
		  IO`print("posicao final do tabuleiro mudou:");assertTrue(board(24).getOccupied() = 0);
		  IO`print("jogador mudou:");assertTrue(g.getCurrentPlayer().getNumber() = 2);-- o jogador nao pode mudar
		    -- comer peca
		  
		  IO`print("TENTAR COMER PECA ADVERSARIO \n");
			IO`print("peca mexeu:");assertTrue(g.movePiece(board(4), board(15)));
			IO`print("posicao inicial do tabuleiro mudou:");assertTrue(board(4).getOccupied() = 0);
		  IO`print("posicao final do tabuleiro mudou:");assertTrue(board(15).getOccupied() = 1);
		  IO`print("jogador mudou:");assertTrue(g.getCurrentPlayer().getNumber() = 2);
		  IO`print("incrementou piecesOut do jogador 2:"); assertTrue(g.getCurrentPlayer().getPiecesOut() = 1);
				
);

public testEnd : () ==> ()
			testEnd() == (

			dcl g: Game := new Game();
			
			dcl p1: Position := new Position(0,0,2);
			dcl p2: Position := new Position(0,1,2);
			dcl p3: Position := new Position(0,2,2);
			dcl p4: Position := new Position(0,3,0);
			dcl p5: Position := new Position(0,4,2);
			dcl p6: Position := new Position(1,0,1);
			dcl p7: Position := new Position(1,1,2);
			dcl p8: Position := new Position(1,2,0);
			dcl p9: Position := new Position(1,3,0);
			dcl p10: Position := new Position(1,4,0);
			dcl p11: Position := new Position(2,0,0);
			dcl p12: Position := new Position(2,1,0);
			dcl p13: Position := new Position(2,2,0);
			dcl p14: Position := new Position(2,3,0);
			dcl p15: Position := new Position(2,4,0);
			dcl p16: Position := new Position(3,0,0);
			dcl p17: Position := new Position(3,1,0);
			dcl p18: Position := new Position(3,2,0);
			dcl p19: Position := new Position(3,3,0);
			dcl p20: Position := new Position(3,4,0);
			dcl p21: Position := new Position(4,0,0);
			dcl p22: Position := new Position(4,1,0);
			dcl p23: Position := new Position(4,2,0);
			dcl p24: Position := new Position(4,3,0);
			dcl p25: Position := new Position(4,4,0);
			
			p7.addValidMoves({p4});
			p6.addValidMoves({p13});
			
			g.setBoard([p1, p2, p3, p4, p5, 
								p6, p7, p8, p9, p10, 
								p11, p12, p13, p14, p15, 
								p16, p17, p18, p19, p20, 
								p21, p22, p23, p24, p25]);
		IO`print("Elementos tabuleiro: \n");
		for i = 1 to 25 do (
			IO`print("(");
			IO`print(g.getBoard()(i).getPosL());
			IO`print(",");
			IO`print(g.getBoard()(i).getPosC());
			IO`print(",");
			IO`print(g.getBoard()(i).getOccupied());
			IO`print(")");
			if g.getBoard()(i).getPosC() = 4
			 then	IO`print("\n");
		);
		
		--Trocar para Jogador 2
		g.changePlayer();
		
		g.getCurrentPlayer().addPiecesFinal();
		g.getCurrentPlayer().addPiecesFinal();
		g.getCurrentPlayer().addPiecesFinal();
		g.getCurrentPlayer().addPiecesFinal();
		
		IO`print("Jogador: ");
		IO`print(g.getCurrentPlayer().getPiecesFinal());
		IO`print("\n");
		
		--verificar se o jogo acaba
		IO`print("Verificar se termina (ainda ha jogadas possiveis): ");
		assertTrue(g.gameEnds()); --jogo ainda nao pode acabar
		
		IO`print("Jogador 2 move peca para linha final: ");
		assertTrue(g.movePiece(p7,p4)); --jogada do Jogador 2 de uma peca para a linha final
		
		IO`print("Verificar se termina (Jogador 1 ainda pode jogar): ");
		assertTrue(g.gameEnds()); --Jogador 1 ainda pode jogar e jogo nao termina
		
		IO`print("Jogador 1 joga: ");
		assertTrue(g.movePiece(p6,p13)); --Jogador 1 joga e, a falta de movimentos do Jogador 2, jogo vai terminar
		
		IO`print("Verificar se termina (Jogador 2 tem todas as suas pecas na linha do oponente e nao pode efetuar mais jogadas): ");
		assertTrue(g.gameEnds()); --confimacao do final do jogo
				
);

public testScore : () ==> ()
			testScore() == (

			dcl g: Game := new Game();
			
			dcl p1: Position := new Position(0,0,2);
			dcl p2: Position := new Position(0,1,2);
			dcl p3: Position := new Position(0,2,2);
			dcl p4: Position := new Position(0,3,0);
			dcl p5: Position := new Position(0,4,2);
			dcl p6: Position := new Position(1,0,1);
			dcl p7: Position := new Position(1,1,2);
			dcl p8: Position := new Position(1,2,0);
			dcl p9: Position := new Position(1,3,0);
			dcl p10: Position := new Position(1,4,0);
			dcl p11: Position := new Position(2,0,0);
			dcl p12: Position := new Position(2,1,0);
			dcl p13: Position := new Position(2,2,0);
			dcl p14: Position := new Position(2,3,0);
			dcl p15: Position := new Position(2,4,0);
			dcl p16: Position := new Position(3,0,0);
			dcl p17: Position := new Position(3,1,0);
			dcl p18: Position := new Position(3,2,0);
			dcl p19: Position := new Position(3,3,0);
			dcl p20: Position := new Position(3,4,0);
			dcl p21: Position := new Position(4,0,0);
			dcl p22: Position := new Position(4,1,0);
			dcl p23: Position := new Position(4,2,0);
			dcl p24: Position := new Position(4,3,0);
			dcl p25: Position := new Position(4,4,0);
			
			p7.addValidMoves({p4});
			p6.addValidMoves({p13});
			
			g.setBoard([p1, p2, p3, p4, p5, 
								p6, p7, p8, p9, p10, 
								p11, p12, p13, p14, p15, 
								p16, p17, p18, p19, p20, 
								p21, p22, p23, p24, p25]);
								
		IO`print("elementos tabuleiro: \n");
		for i = 1 to 25 do (
			IO`print("(");
			IO`print(g.getBoard()(i).getPosL());
			IO`print(",");
			IO`print(g.getBoard()(i).getPosC());
			IO`print(",");
			IO`print(g.getBoard()(i).getOccupied());
			IO`print(")");
			if g.getBoard()(i).getPosC() = 4
			 then	IO`print("\n");
		);
		
		--Trocar para Jogador 2
		g.changePlayer();
		
		g.getCurrentPlayer().addPiecesFinal();
		g.getCurrentPlayer().addPiecesFinal();
		g.getCurrentPlayer().addPiecesFinal();
		g.getCurrentPlayer().addPiecesFinal();
		
		IO`print("\nVERIFICAR SE JOGO TERMINA\n");
		
		--verificar se o jogo acaba
		IO`print("Verificar se termina (ainda ha jogadas possiveis): ");
		assertTrue(g.gameEnds()); --jogo ainda nao pode acabar
		
		IO`print("Jogador 2 move peca para linha final: ");
		assertTrue(g.movePiece(p7,p4)); --jogada do Jogador 2 de uma peca para a linha final
		
		IO`print("Verificar se termina (Jogador 1 ainda pode jogar): ");
		assertTrue(g.gameEnds()); --Jogador 1 ainda pode jogar e jogo nao termina
		
		IO`print("Jogador 1 joga: ");
		assertTrue(g.movePiece(p6,p13)); --Jogador 1 joga e, a falta de movimentos do Jogador 2, jogo vai terminar
		
		IO`print("Verificar se termina (Jogador 2 tem todas as suas pecas na linha do oponente e nao pode efetuar mais jogadas): ");
		assertTrue(g.gameEnds()); --confimacao do final do jogo
		
		g.countPoints();
		IO`print("\nVERIFICAR PONTUACAO\n");
		IO`print("Jogador 2: ");
		assertEqual(g.getPlayers()(2).getScore(), 10); --confimacao do final do jogo
		IO`print("Jogador 1: ");
		assertEqual(g.getPlayers()(1).getScore(), 1);
				
);

public testRestorePiece : () ==> ()
			testRestorePiece() == (

			dcl g: Game := new Game();
			
			dcl p1: Position := new Position(0,0,0);
			dcl p2: Position := new Position(0,1,1);
			dcl p3: Position := new Position(0,2,1);
			dcl p4: Position := new Position(0,3,0);
			dcl p5: Position := new Position(0,4,0);
			dcl p6: Position := new Position(1,0,0);
			dcl p7: Position := new Position(1,1,0);
			dcl p8: Position := new Position(1,2,0);
			dcl p9: Position := new Position(1,3,0);
			dcl p10: Position := new Position(1,4,0);
			dcl p11: Position := new Position(2,0,0);
			dcl p12: Position := new Position(2,1,0);
			dcl p13: Position := new Position(2,2,0);
			dcl p14: Position := new Position(2,3,1);
			dcl p15: Position := new Position(2,4,0);
			dcl p16: Position := new Position(3,0,0);
			dcl p17: Position := new Position(3,1,2);
			dcl p18: Position := new Position(3,2,0);
			dcl p19: Position := new Position(3,3,0);
			dcl p20: Position := new Position(3,4,0);
			dcl p21: Position := new Position(4,0,2);
			dcl p22: Position := new Position(4,1,2);
			dcl p23: Position := new Position(4,2,2);
			dcl p24: Position := new Position(4,3,2);
			dcl p25: Position := new Position(4,4,0);
			
			p14.addValidMoves({p25});
			g.getCurrentPlayer().addPiecesOut();
			
			g.setBoard([p1, p2, p3, p4, p5, 
								p6, p7, p8, p9, p10, 
								p11, p12, p13, p14, p15, 
								p16, p17, p18, p19, p20, 
								p21, p22, p23, p24, p25]);
								
		IO`print("Elementos tabuleiro: \n");
		for i = 1 to 25 do (
			IO`print("(");
			IO`print(g.getBoard()(i).getPosL());
			IO`print(",");
			IO`print(g.getBoard()(i).getPosC());
			IO`print(",");
			IO`print(g.getBoard()(i).getOccupied());
			IO`print(")");
			if g.getBoard()(i).getPosC() = 4
			 then	IO`print("\n");
		);
		
		IO`print("\nVERIFICAR RESTAURAR PECA\n");
		
		IO`print("Jogador 1 move peca para linha final: ");
		assertTrue(g.movePiece(p14,p25)); --jogada do Jogador 1 de uma peca para a linha final
		
		
		IO`print("Pecas fora do tabuleiro do Jogador 1: ");
		assertEqual(0, g.getPlayers()(1).getPiecesOut()); --
		
		g.restorePiece(p1);
		IO`print("Jogador 1 restaura peca na posicao 1: ");
		assertEqual(g.getBoard()(1).getOccupied(), 1); --
		assertEqual(g.getPlayers()(1).getPiecesOut(), 0);
				
);

public static main: () ==> ()
                main() ==
                (   dcl t : TestJarmo := new TestJarmo();
                   -- t.testBoard();
                    --t.testMove();
      							--t.testEnd();
                      t.testRestorePiece();  
                );
                
end TestJarmo
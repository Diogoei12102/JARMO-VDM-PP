class Player
types
public PlayerNumber = nat1; 
public Score = nat;

values
-- TODO Define values here
instance variables
private number: PlayerNumber;
private score: Score := 0;
private piecesOut: nat := 0;
private piecesFinal: nat := 0;

operations
public Player : PlayerNumber ==> Player
	Player(num) == (
		number := num;
		return self
	);
	
pure public getNumber : () ==> PlayerNumber
		getNumber() == (
			return number;
			);
			
pure public getPiecesOut : () ==> nat
		getPiecesOut() == (
			return piecesOut;
);

pure public getPiecesFinal : () ==> nat
		getPiecesFinal() == (
			return piecesFinal;
);

public addPiecesFinal : () ==> ()
		addPiecesFinal() == (
			piecesFinal := piecesFinal + 1;
);

public subPiecesFinal : () ==> ()
		subPiecesFinal() == (
			piecesFinal := piecesFinal - 1;
);

public addPiecesOut : () ==> ()
		addPiecesOut() == (
			piecesOut := piecesOut + 1;
);

public subPiecesOut : () ==> ()
		subPiecesOut() == (
			piecesOut := piecesOut - 1;
);
public setScore : nat  ==> ()
		setScore(sc) == (
			score := sc;
);

pure public getScore : () ==> nat
		getScore() == (
			return score;
);
-- TODO Define operations here
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Player